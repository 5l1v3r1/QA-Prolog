// Code generated by pigeon; DO NOT EDIT.

// This is the parser for Quantum-Annealing Prolog.  It was written using the
// Pigeon parser generator's DSL (https://github.com/PuerkitoBio/pigeon) and is
// inspired by the Prolog grammar found at
// https://raw.githubusercontent.com/simonkrenger/ch.bfh.bti7064.w2013.PrologParser/master/doc/prolog-bnf-grammar.txt
// but with various bugs corrected, support for relational and arithmetic
// expressions added, and the whole grammar converted to a PEG.

package main

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

// An ASTNodeType indicates the type of AST node we're working with.
type ASTNodeType int

// Declare all of the AST node types we intend to use.
const (
	UnknownType            ASTNodeType = iota // Should never be used
	NumeralType                               // Non-negative integer (e.g., "123")
	AtomType                                  // Atom, with quotes stripped (e.g., "scott")
	VariableType                              // Variable (e.g., "Name")
	TermType                                  // Term (a numeral, atom, or variable)
	TermListType                              // List of terms
	ListTailType                              // Tail of a list (e.g., the "T" in "[H|T]").
	ListType                                  // List (e.g., "[a, b, c]" or "[x, y, z|More]")
	PrimaryExprType                           // Primary expression (e.g., "(2+3)")
	UnaryExprType                             // Unary expression (e.g., "-X")
	UnaryOpType                               // Unary operator (e.g., "-")
	MultiplicativeExprType                    // Multiplicative expression (e.g., "7 * 5")
	MultiplicativeOpType                      // Multiplicative operator (e.g., "*")
	AdditiveExprType                          // Additive expression (e.g., "7 - 5")
	AdditiveOpType                            // Additive operator (e.g., "+")
	RelationOpType                            // Relation operator (e.g., "=<")
	RelationType                              // Relation (e.g., "happy(X) = Y" or "N < 10")
	PredicateType                             // Predicate (e.g., "likes(john, mary)")
	StructureType                             // Structure (e.g., "likes(john, mary)")
	PredicateListType                         // List of predicates (e.g., "likes(john, X), likes(X, mary)")
	ClauseType                                // Clause (e.g., "likes(john, X) :- likes(mary, X).")
	ClauseListType                            // List of clauses (e.g., "likes(john, X) :- likes(mary, X). likes(mary, cheese).")
	QueryType                                 // Query (e.g., "?- likes(john, X).")
	ProgramType                               // A complete Prolog program
)

// An ASTNode defines a single node in an abstract syntax tree.
type ASTNode struct {
	Type     ASTNodeType // What this node represents
	Text     string      // Node's textural represntation
	Pos      position    // Node's position in the input file
	Value    interface{} // Node's value (int, string, etc.)
	Children []*ASTNode  // Child AST node(s), if any
}

// String outputs an AST node and all its children, mostly for debugging.
func (a *ASTNode) String() string {
	result := ""
	var showAll func(*ASTNode, int)
	showAll = func(n *ASTNode, depth int) {
		// Display this node.
		indent := strings.Repeat("  ", depth)
		result += fmt.Sprintf("%sType:  %s\n", indent, n.Type)
		result += fmt.Sprintf("%sValue: %#v\n", indent, n.Value)
		result += fmt.Sprintf("%sText:  %q\n", indent, n.Text)
		result += fmt.Sprintf("%sPos:   %d:%d\n", indent, n.Pos.line, n.Pos.col)

		// Recursively display all children.
		for i, child := range n.Children {
			if i > 0 {
				result += "\n"
			}
			showAll(child, depth+1)
		}
	}
	showAll(a, 0)
	return result
}

// ConstructList constructs a list-type AST node from a parent type, a parent
// value (which defaults to the node's textual representation), a head child,
// and tail children.  (Children may be nil.)  The idea is to produce a single
// list of children (e.g., [a, b, c]) rather than a degenerate tree (e.g., [a,
// [b, [c]]]), which is what straightforward construction would naturally
// produce.
func (c *current) ConstructList(t ASTNodeType, v, n, ns interface{}) *ASTNode {
	head, hasHead := n.(*ASTNode)
	tail, hasTail := ns.(*ASTNode)
	node := ASTNode{
		Type:  t,
		Text:  string(c.text),
		Value: v,
		Pos:   c.pos,
	}
	if v == nil {
		node.Value = node.Text
	}
	if !hasHead {
		return &node
	}
	node.Children = []*ASTNode{head}
	if !hasTail {
		return &node
	}
	node.Children = append(node.Children, tail.Children...)
	return &node
}

// PrepareRelation takes two expressions and an operator and returns an ASTNode
// representing that relation.
func (c *current) PrepareRelation(e1, o, e2 interface{}) *ASTNode {
	kids := []*ASTNode{
		e1.(*ASTNode),
		o.(*ASTNode),
		e2.(*ASTNode),
	}
	node := ASTNode{
		Type:     RelationType,
		Text:     string(c.text),
		Pos:      c.pos,
		Value:    kids[1].Text,
		Children: kids,
	}
	return &node
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Program",
			pos:  position{line: 126, col: 1, offset: 5840},
			expr: &choiceExpr{
				pos: position{line: 126, col: 12, offset: 5851},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 126, col: 12, offset: 5851},
						run: (*parser).callonProgram2,
						expr: &seqExpr{
							pos: position{line: 126, col: 12, offset: 5851},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 126, col: 12, offset: 5851},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 126, col: 17, offset: 5856},
									label: "cl",
									expr: &ruleRefExpr{
										pos:  position{line: 126, col: 20, offset: 5859},
										name: "ClauseList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 126, col: 31, offset: 5870},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 126, col: 36, offset: 5875},
									label: "q",
									expr: &ruleRefExpr{
										pos:  position{line: 126, col: 38, offset: 5877},
										name: "Query",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 126, col: 44, offset: 5883},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 126, col: 49, offset: 5888},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 126, col: 53, offset: 5892},
									name: "Skip",
								},
								&ruleRefExpr{
									pos:  position{line: 126, col: 58, offset: 5897},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 131, col: 5, offset: 6075},
						run: (*parser).callonProgram14,
						expr: &seqExpr{
							pos: position{line: 131, col: 5, offset: 6075},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 131, col: 5, offset: 6075},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 131, col: 10, offset: 6080},
									label: "cl",
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 13, offset: 6083},
										name: "ClauseList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 131, col: 24, offset: 6094},
									name: "Skip",
								},
								&ruleRefExpr{
									pos:  position{line: 131, col: 29, offset: 6099},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Query",
			pos:  position{line: 136, col: 1, offset: 6212},
			expr: &actionExpr{
				pos: position{line: 136, col: 10, offset: 6221},
				run: (*parser).callonQuery1,
				expr: &seqExpr{
					pos: position{line: 136, col: 10, offset: 6221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 136, col: 10, offset: 6221},
							val:        "?-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 136, col: 15, offset: 6226},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 20, offset: 6231},
							label: "ps",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 23, offset: 6234},
								name: "PredicateList",
							},
						},
					},
				},
			},
		},
		{
			name: "ClauseList",
			pos:  position{line: 181, col: 1, offset: 7270},
			expr: &choiceExpr{
				pos: position{line: 181, col: 15, offset: 7284},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 181, col: 15, offset: 7284},
						run: (*parser).callonClauseList2,
						expr: &seqExpr{
							pos: position{line: 181, col: 15, offset: 7284},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 181, col: 15, offset: 7284},
									label: "cl",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 18, offset: 7287},
										name: "Clause",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 181, col: 25, offset: 7294},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 181, col: 30, offset: 7299},
									label: "cls",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 34, offset: 7303},
										name: "ClauseList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 183, col: 5, offset: 7386},
						run: (*parser).callonClauseList9,
						expr: &labeledExpr{
							pos:   position{line: 183, col: 5, offset: 7386},
							label: "cl",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 8, offset: 7389},
								name: "Clause",
							},
						},
					},
				},
			},
		},
		{
			name: "Clause",
			pos:  position{line: 188, col: 1, offset: 7509},
			expr: &choiceExpr{
				pos: position{line: 188, col: 11, offset: 7519},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 188, col: 11, offset: 7519},
						run: (*parser).callonClause2,
						expr: &seqExpr{
							pos: position{line: 188, col: 11, offset: 7519},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 188, col: 11, offset: 7519},
									label: "p",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 13, offset: 7521},
										name: "Predicate",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 23, offset: 7531},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 188, col: 28, offset: 7536},
									val:        ":-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 33, offset: 7541},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 188, col: 38, offset: 7546},
									label: "ps",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 41, offset: 7549},
										name: "PredicateList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 55, offset: 7563},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 188, col: 60, offset: 7568},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 7756},
						run: (*parser).callonClause13,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 7756},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 193, col: 5, offset: 7756},
									label: "p",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 7, offset: 7758},
										name: "Predicate",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 17, offset: 7768},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 193, col: 22, offset: 7773},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PredicateList",
			pos:  position{line: 201, col: 1, offset: 8010},
			expr: &choiceExpr{
				pos: position{line: 201, col: 18, offset: 8027},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 201, col: 18, offset: 8027},
						run: (*parser).callonPredicateList2,
						expr: &seqExpr{
							pos: position{line: 201, col: 18, offset: 8027},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 201, col: 18, offset: 8027},
									label: "p",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 20, offset: 8029},
										name: "Predicate",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 30, offset: 8039},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 201, col: 35, offset: 8044},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 39, offset: 8048},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 201, col: 44, offset: 8053},
									label: "ps",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 47, offset: 8056},
										name: "PredicateList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 5, offset: 8143},
						run: (*parser).callonPredicateList11,
						expr: &labeledExpr{
							pos:   position{line: 203, col: 5, offset: 8143},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 7, offset: 8145},
								name: "Predicate",
							},
						},
					},
				},
			},
		},
		{
			name: "Predicate",
			pos:  position{line: 208, col: 1, offset: 8273},
			expr: &choiceExpr{
				pos: position{line: 208, col: 14, offset: 8286},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 208, col: 14, offset: 8286},
						run: (*parser).callonPredicate2,
						expr: &labeledExpr{
							pos:   position{line: 208, col: 14, offset: 8286},
							label: "r",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 16, offset: 8288},
								name: "Relation",
							},
						},
					},
					&actionExpr{
						pos: position{line: 210, col: 5, offset: 8367},
						run: (*parser).callonPredicate5,
						expr: &seqExpr{
							pos: position{line: 210, col: 5, offset: 8367},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 210, col: 5, offset: 8367},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 210, col: 7, offset: 8369},
										name: "Atom",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 210, col: 12, offset: 8374},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 210, col: 17, offset: 8379},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 210, col: 21, offset: 8383},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 210, col: 26, offset: 8388},
									label: "ts",
									expr: &ruleRefExpr{
										pos:  position{line: 210, col: 29, offset: 8391},
										name: "TermList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 210, col: 38, offset: 8400},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 210, col: 43, offset: 8405},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 212, col: 5, offset: 8478},
						run: (*parser).callonPredicate16,
						expr: &labeledExpr{
							pos:   position{line: 212, col: 5, offset: 8478},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 7, offset: 8480},
								name: "Atom",
							},
						},
					},
				},
			},
		},
		{
			name: "Relation",
			pos:  position{line: 217, col: 1, offset: 8598},
			expr: &choiceExpr{
				pos: position{line: 217, col: 13, offset: 8610},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 217, col: 13, offset: 8610},
						run: (*parser).callonRelation2,
						expr: &seqExpr{
							pos: position{line: 217, col: 14, offset: 8611},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 217, col: 14, offset: 8611},
									label: "e1",
									expr: &ruleRefExpr{
										pos:  position{line: 217, col: 17, offset: 8614},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 217, col: 30, offset: 8627},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 217, col: 35, offset: 8632},
									label: "o",
									expr: &ruleRefExpr{
										pos:  position{line: 217, col: 37, offset: 8634},
										name: "RelationOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 217, col: 54, offset: 8651},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 217, col: 59, offset: 8656},
									label: "e2",
									expr: &ruleRefExpr{
										pos:  position{line: 217, col: 62, offset: 8659},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 219, col: 5, offset: 8728},
						run: (*parser).callonRelation12,
						expr: &seqExpr{
							pos: position{line: 219, col: 6, offset: 8729},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 219, col: 6, offset: 8729},
									label: "e1",
									expr: &ruleRefExpr{
										pos:  position{line: 219, col: 9, offset: 8732},
										name: "Term",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 219, col: 14, offset: 8737},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 219, col: 19, offset: 8742},
									label: "o",
									expr: &ruleRefExpr{
										pos:  position{line: 219, col: 21, offset: 8744},
										name: "EqualityOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 219, col: 38, offset: 8761},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 219, col: 43, offset: 8766},
									label: "e2",
									expr: &ruleRefExpr{
										pos:  position{line: 219, col: 46, offset: 8769},
										name: "Term",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelationOperator",
			pos:  position{line: 224, col: 1, offset: 8886},
			expr: &actionExpr{
				pos: position{line: 224, col: 21, offset: 8906},
				run: (*parser).callonRelationOperator1,
				expr: &choiceExpr{
					pos: position{line: 224, col: 22, offset: 8907},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 22, offset: 8907},
							val:        "=<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 29, offset: 8914},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 36, offset: 8921},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 42, offset: 8927},
							val:        ">",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 48, offset: 8933},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 54, offset: 8939},
							val:        "\\=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 230, col: 1, offset: 9105},
			expr: &actionExpr{
				pos: position{line: 230, col: 21, offset: 9125},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 230, col: 22, offset: 9126},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 230, col: 22, offset: 9126},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 230, col: 28, offset: 9132},
							val:        "\\=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 235, col: 1, offset: 9248},
			expr: &choiceExpr{
				pos: position{line: 235, col: 17, offset: 9264},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 235, col: 17, offset: 9264},
						run: (*parser).callonAdditiveExpr2,
						expr: &seqExpr{
							pos: position{line: 235, col: 17, offset: 9264},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 235, col: 17, offset: 9264},
									label: "e1",
									expr: &ruleRefExpr{
										pos:  position{line: 235, col: 20, offset: 9267},
										name: "MultiplicativeExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 235, col: 39, offset: 9286},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 235, col: 44, offset: 9291},
									label: "o",
									expr: &ruleRefExpr{
										pos:  position{line: 235, col: 46, offset: 9293},
										name: "AdditiveOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 235, col: 63, offset: 9310},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 235, col: 68, offset: 9315},
									label: "e2",
									expr: &ruleRefExpr{
										pos:  position{line: 235, col: 71, offset: 9318},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 249, col: 5, offset: 9720},
						run: (*parser).callonAdditiveExpr12,
						expr: &labeledExpr{
							pos:   position{line: 249, col: 5, offset: 9720},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 7, offset: 9722},
								name: "MultiplicativeExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 254, col: 1, offset: 9858},
			expr: &actionExpr{
				pos: position{line: 254, col: 21, offset: 9878},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 254, col: 22, offset: 9879},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 254, col: 22, offset: 9879},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 254, col: 28, offset: 9885},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 259, col: 1, offset: 10009},
			expr: &choiceExpr{
				pos: position{line: 259, col: 23, offset: 10031},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 259, col: 23, offset: 10031},
						run: (*parser).callonMultiplicativeExpr2,
						expr: &seqExpr{
							pos: position{line: 259, col: 23, offset: 10031},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 259, col: 23, offset: 10031},
									label: "e1",
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 26, offset: 10034},
										name: "UnaryExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 259, col: 36, offset: 10044},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 259, col: 41, offset: 10049},
									label: "o",
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 43, offset: 10051},
										name: "MultiplicativeOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 259, col: 66, offset: 10074},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 259, col: 71, offset: 10079},
									label: "e2",
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 74, offset: 10082},
										name: "MultiplicativeExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 273, col: 5, offset: 10496},
						run: (*parser).callonMultiplicativeExpr12,
						expr: &labeledExpr{
							pos:   position{line: 273, col: 5, offset: 10496},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 7, offset: 10498},
								name: "UnaryExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 278, col: 1, offset: 10636},
			expr: &actionExpr{
				pos: position{line: 278, col: 27, offset: 10662},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &litMatcher{
					pos:        position{line: 278, col: 27, offset: 10662},
					val:        "*",
					ignoreCase: false,
				},
			},
		},
		{
			name: "UnaryExpr",
			pos:  position{line: 283, col: 1, offset: 10786},
			expr: &choiceExpr{
				pos: position{line: 283, col: 14, offset: 10799},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 283, col: 14, offset: 10799},
						run: (*parser).callonUnaryExpr2,
						expr: &seqExpr{
							pos: position{line: 283, col: 14, offset: 10799},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 283, col: 14, offset: 10799},
									label: "o",
									expr: &ruleRefExpr{
										pos:  position{line: 283, col: 16, offset: 10801},
										name: "UnaryOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 283, col: 30, offset: 10815},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 283, col: 35, offset: 10820},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 283, col: 37, offset: 10822},
										name: "PrimaryExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 296, col: 5, offset: 11188},
						run: (*parser).callonUnaryExpr9,
						expr: &labeledExpr{
							pos:   position{line: 296, col: 5, offset: 11188},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 7, offset: 11190},
								name: "PrimaryExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "UnaryOperator",
			pos:  position{line: 301, col: 1, offset: 11316},
			expr: &actionExpr{
				pos: position{line: 301, col: 18, offset: 11333},
				run: (*parser).callonUnaryOperator1,
				expr: &litMatcher{
					pos:        position{line: 301, col: 18, offset: 11333},
					val:        "-",
					ignoreCase: false,
				},
			},
		},
		{
			name: "PrimaryExpr",
			pos:  position{line: 306, col: 1, offset: 11471},
			expr: &choiceExpr{
				pos: position{line: 306, col: 16, offset: 11486},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 306, col: 16, offset: 11486},
						run: (*parser).callonPrimaryExpr2,
						expr: &seqExpr{
							pos: position{line: 306, col: 16, offset: 11486},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 306, col: 16, offset: 11486},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 306, col: 20, offset: 11490},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 306, col: 25, offset: 11495},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 306, col: 27, offset: 11497},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 306, col: 40, offset: 11510},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 306, col: 45, offset: 11515},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 11592},
						run: (*parser).callonPrimaryExpr10,
						expr: &labeledExpr{
							pos:   position{line: 308, col: 5, offset: 11592},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 7, offset: 11594},
								name: "Numeral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 310, col: 5, offset: 11673},
						run: (*parser).callonPrimaryExpr13,
						expr: &labeledExpr{
							pos:   position{line: 310, col: 5, offset: 11673},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 310, col: 7, offset: 11675},
								name: "Variable",
							},
						},
					},
				},
			},
		},
		{
			name: "TermList",
			pos:  position{line: 315, col: 1, offset: 11798},
			expr: &choiceExpr{
				pos: position{line: 315, col: 13, offset: 11810},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 315, col: 13, offset: 11810},
						run: (*parser).callonTermList2,
						expr: &seqExpr{
							pos: position{line: 315, col: 13, offset: 11810},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 315, col: 13, offset: 11810},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 315, col: 15, offset: 11812},
										name: "Term",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 315, col: 20, offset: 11817},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 315, col: 25, offset: 11822},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 315, col: 29, offset: 11826},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 315, col: 34, offset: 11831},
									label: "ts",
									expr: &ruleRefExpr{
										pos:  position{line: 315, col: 37, offset: 11834},
										name: "TermList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 317, col: 5, offset: 11911},
						run: (*parser).callonTermList11,
						expr: &labeledExpr{
							pos:   position{line: 317, col: 5, offset: 11911},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 7, offset: 11913},
								name: "Term",
							},
						},
					},
				},
			},
		},
		{
			name: "Term",
			pos:  position{line: 322, col: 1, offset: 12026},
			expr: &actionExpr{
				pos: position{line: 322, col: 9, offset: 12034},
				run: (*parser).callonTerm1,
				expr: &labeledExpr{
					pos:   position{line: 322, col: 9, offset: 12034},
					label: "child",
					expr: &choiceExpr{
						pos: position{line: 322, col: 16, offset: 12041},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 322, col: 16, offset: 12041},
								name: "Numeral",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 26, offset: 12051},
								name: "Structure",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 38, offset: 12063},
								name: "Atom",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 45, offset: 12070},
								name: "Variable",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 56, offset: 12081},
								name: "List",
							},
						},
					},
				},
			},
		},
		{
			name: "List",
			pos:  position{line: 328, col: 1, offset: 12251},
			expr: &choiceExpr{
				pos: position{line: 328, col: 9, offset: 12259},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 328, col: 9, offset: 12259},
						run: (*parser).callonList2,
						expr: &seqExpr{
							pos: position{line: 328, col: 9, offset: 12259},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 328, col: 9, offset: 12259},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 328, col: 13, offset: 12263},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 328, col: 18, offset: 12268},
									label: "h",
									expr: &ruleRefExpr{
										pos:  position{line: 328, col: 20, offset: 12270},
										name: "TermList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 328, col: 29, offset: 12279},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 328, col: 34, offset: 12284},
									val:        "|",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 328, col: 38, offset: 12288},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 328, col: 43, offset: 12293},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 328, col: 45, offset: 12295},
										name: "ListTail",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 328, col: 54, offset: 12304},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 328, col: 59, offset: 12309},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 331, col: 5, offset: 12406},
						run: (*parser).callonList15,
						expr: &seqExpr{
							pos: position{line: 331, col: 5, offset: 12406},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 331, col: 5, offset: 12406},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 331, col: 9, offset: 12410},
									name: "Skip",
								},
								&labeledExpr{
									pos:   position{line: 331, col: 14, offset: 12415},
									label: "h",
									expr: &ruleRefExpr{
										pos:  position{line: 331, col: 16, offset: 12417},
										name: "TermList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 331, col: 25, offset: 12426},
									name: "Skip",
								},
								&litMatcher{
									pos:        position{line: 331, col: 30, offset: 12431},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListTail",
			pos:  position{line: 337, col: 1, offset: 12589},
			expr: &actionExpr{
				pos: position{line: 337, col: 13, offset: 12601},
				run: (*parser).callonListTail1,
				expr: &labeledExpr{
					pos:   position{line: 337, col: 13, offset: 12601},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 337, col: 15, offset: 12603},
						name: "Variable",
					},
				},
			},
		},
		{
			name: "Structure",
			pos:  position{line: 342, col: 1, offset: 12725},
			expr: &actionExpr{
				pos: position{line: 342, col: 14, offset: 12738},
				run: (*parser).callonStructure1,
				expr: &seqExpr{
					pos: position{line: 342, col: 14, offset: 12738},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 342, col: 14, offset: 12738},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 16, offset: 12740},
								name: "Atom",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 21, offset: 12745},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 342, col: 26, offset: 12750},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 30, offset: 12754},
							name: "Skip",
						},
						&labeledExpr{
							pos:   position{line: 342, col: 35, offset: 12759},
							label: "ts",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 38, offset: 12762},
								name: "TermList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 47, offset: 12771},
							name: "Skip",
						},
						&litMatcher{
							pos:        position{line: 342, col: 52, offset: 12776},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Variable",
			pos:  position{line: 347, col: 1, offset: 12892},
			expr: &actionExpr{
				pos: position{line: 347, col: 13, offset: 12904},
				run: (*parser).callonVariable1,
				expr: &seqExpr{
					pos: position{line: 347, col: 13, offset: 12904},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 347, col: 13, offset: 12904},
							name: "Uppercase_letter",
						},
						&ruleRefExpr{
							pos:  position{line: 347, col: 30, offset: 12921},
							name: "Symbol_trailer",
						},
					},
				},
			},
		},
		{
			name: "Atom",
			pos:  position{line: 352, col: 1, offset: 13046},
			expr: &choiceExpr{
				pos: position{line: 352, col: 9, offset: 13054},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 352, col: 9, offset: 13054},
						run: (*parser).callonAtom2,
						expr: &ruleRefExpr{
							pos:  position{line: 352, col: 9, offset: 13054},
							name: "Small_atom",
						},
					},
					&actionExpr{
						pos: position{line: 354, col: 5, offset: 13132},
						run: (*parser).callonAtom4,
						expr: &ruleRefExpr{
							pos:  position{line: 354, col: 5, offset: 13132},
							name: "Single_quoted_string",
						},
					},
				},
			},
		},
		{
			name: "Single_quoted_string",
			pos:  position{line: 365, col: 1, offset: 13376},
			expr: &seqExpr{
				pos: position{line: 365, col: 25, offset: 13400},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 365, col: 25, offset: 13400},
						val:        "'",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 365, col: 29, offset: 13404},
						expr: &ruleRefExpr{
							pos:  position{line: 365, col: 29, offset: 13404},
							name: "Single_quoted_string_char",
						},
					},
					&litMatcher{
						pos:        position{line: 365, col: 56, offset: 13431},
						val:        "'",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Single_quoted_string_char",
			pos:  position{line: 367, col: 1, offset: 13436},
			expr: &choiceExpr{
				pos: position{line: 367, col: 30, offset: 13465},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 367, col: 30, offset: 13465},
						name: "Character",
					},
					&seqExpr{
						pos: position{line: 367, col: 42, offset: 13477},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 367, col: 42, offset: 13477},
								val:        "\\",
								ignoreCase: false,
							},
							&anyMatcher{
								line: 367, col: 47, offset: 13482,
							},
						},
					},
				},
			},
		},
		{
			name: "Small_atom",
			pos:  position{line: 369, col: 1, offset: 13485},
			expr: &actionExpr{
				pos: position{line: 369, col: 15, offset: 13499},
				run: (*parser).callonSmall_atom1,
				expr: &seqExpr{
					pos: position{line: 369, col: 15, offset: 13499},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 369, col: 15, offset: 13499},
							name: "Lowercase_letter",
						},
						&ruleRefExpr{
							pos:  position{line: 369, col: 32, offset: 13516},
							name: "Symbol_trailer",
						},
					},
				},
			},
		},
		{
			name: "Symbol_trailer",
			pos:  position{line: 373, col: 1, offset: 13571},
			expr: &zeroOrMoreExpr{
				pos: position{line: 373, col: 19, offset: 13589},
				expr: &choiceExpr{
					pos: position{line: 373, col: 20, offset: 13590},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 373, col: 20, offset: 13590},
							name: "Lowercase_letter",
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 39, offset: 13609},
							name: "Uppercase_letter",
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 58, offset: 13628},
							name: "Digit",
						},
					},
				},
			},
		},
		{
			name: "Character",
			pos:  position{line: 375, col: 1, offset: 13637},
			expr: &choiceExpr{
				pos: position{line: 375, col: 14, offset: 13650},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 375, col: 14, offset: 13650},
						name: "Lowercase_letter",
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 33, offset: 13669},
						name: "Uppercase_letter",
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 52, offset: 13688},
						name: "Digit",
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 60, offset: 13696},
						name: "Not_single_quote",
					},
				},
			},
		},
		{
			name: "Lowercase_letter",
			pos:  position{line: 377, col: 1, offset: 13714},
			expr: &charClassMatcher{
				pos:        position{line: 377, col: 21, offset: 13734},
				val:        "[\\p{Ll}]",
				classes:    []*unicode.RangeTable{rangeTable("Ll")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Uppercase_letter",
			pos:  position{line: 379, col: 1, offset: 13744},
			expr: &charClassMatcher{
				pos:        position{line: 379, col: 21, offset: 13764},
				val:        "[\\p{Lu}_]",
				chars:      []rune{'_'},
				classes:    []*unicode.RangeTable{rangeTable("Lu")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Digit",
			pos:  position{line: 381, col: 1, offset: 13775},
			expr: &charClassMatcher{
				pos:        position{line: 381, col: 10, offset: 13784},
				val:        "[\\p{Nd}]",
				classes:    []*unicode.RangeTable{rangeTable("Nd")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Whitespace",
			pos:  position{line: 383, col: 1, offset: 13794},
			expr: &charClassMatcher{
				pos:        position{line: 383, col: 15, offset: 13808},
				val:        "[\\p{Zs}\\n\\r\\t]",
				chars:      []rune{'\n', '\r', '\t'},
				classes:    []*unicode.RangeTable{rangeTable("Zs")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "One_line_comment",
			pos:  position{line: 385, col: 1, offset: 13824},
			expr: &seqExpr{
				pos: position{line: 385, col: 21, offset: 13844},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 385, col: 21, offset: 13844},
						val:        "%",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 385, col: 25, offset: 13848},
						expr: &charClassMatcher{
							pos:        position{line: 385, col: 25, offset: 13848},
							val:        "[^\\n\\r]",
							chars:      []rune{'\n', '\r'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 385, col: 34, offset: 13857},
						expr: &litMatcher{
							pos:        position{line: 385, col: 34, offset: 13857},
							val:        "\r",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 385, col: 40, offset: 13863},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Multi_line_comment",
			pos:  position{line: 387, col: 1, offset: 13869},
			expr: &seqExpr{
				pos: position{line: 387, col: 23, offset: 13891},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 387, col: 23, offset: 13891},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 387, col: 28, offset: 13896},
						expr: &choiceExpr{
							pos: position{line: 387, col: 29, offset: 13897},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 387, col: 29, offset: 13897},
									name: "Multi_line_comment",
								},
								&seqExpr{
									pos: position{line: 387, col: 50, offset: 13918},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 387, col: 50, offset: 13918},
											val:        "*",
											ignoreCase: false,
										},
										&notExpr{
											pos: position{line: 387, col: 54, offset: 13922},
											expr: &litMatcher{
												pos:        position{line: 387, col: 55, offset: 13923},
												val:        "/",
												ignoreCase: false,
											},
										},
									},
								},
								&charClassMatcher{
									pos:        position{line: 387, col: 61, offset: 13929},
									val:        "[^*]",
									chars:      []rune{'*'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 387, col: 68, offset: 13936},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Skip",
			pos:  position{line: 390, col: 1, offset: 14019},
			expr: &zeroOrMoreExpr{
				pos: position{line: 390, col: 9, offset: 14027},
				expr: &choiceExpr{
					pos: position{line: 390, col: 10, offset: 14028},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 390, col: 10, offset: 14028},
							name: "Whitespace",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 23, offset: 14041},
							name: "One_line_comment",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 42, offset: 14060},
							name: "Multi_line_comment",
						},
					},
				},
			},
		},
		{
			name: "Numeral",
			pos:  position{line: 393, col: 1, offset: 14125},
			expr: &actionExpr{
				pos: position{line: 393, col: 12, offset: 14136},
				run: (*parser).callonNumeral1,
				expr: &oneOrMoreExpr{
					pos: position{line: 393, col: 12, offset: 14136},
					expr: &ruleRefExpr{
						pos:  position{line: 393, col: 12, offset: 14136},
						name: "Digit",
					},
				},
			},
		},
		{
			name: "Not_single_quote",
			pos:  position{line: 407, col: 1, offset: 14457},
			expr: &charClassMatcher{
				pos:        position{line: 407, col: 21, offset: 14477},
				val:        "[^']",
				chars:      []rune{'\''},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "EOF",
			pos:  position{line: 409, col: 1, offset: 14483},
			expr: &notExpr{
				pos: position{line: 409, col: 8, offset: 14490},
				expr: &anyMatcher{
					line: 409, col: 9, offset: 14491,
				},
			},
		},
	},
}

func (c *current) onProgram2(cl, q interface{}) (interface{}, error) {
	// Append the query to the list of clauses.
	prog := c.ConstructList(ProgramType, nil, cl, nil)
	prog.Children = append(prog.Children, q.(*ASTNode))
	return prog, nil
}

func (p *parser) callonProgram2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProgram2(stack["cl"], stack["q"])
}

func (c *current) onProgram14(cl interface{}) (interface{}, error) {
	return c.ConstructList(ProgramType, nil, cl, nil), nil
}

func (p *parser) callonProgram14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProgram14(stack["cl"])
}

func (c *current) onQuery1(ps interface{}) (interface{}, error) {
	// Acquire a list of all variables that appear in the query.
	vSet := make(map[string]Empty)
	for _, v := range ps.(*ASTNode).FindByType(VariableType) {
		vSet[v.Value.(string)] = Empty{}
	}
	vList := make([]string, 0, len(vSet))
	for v := range vSet {
		vList = append(vList, v)
	}
	sort.Strings(vList)

	// Insert a head predicate so we can process the query as if it were a
	// clause.
	pKids := make([]*ASTNode, 0, len(vList)+1)
	pKids = append(pKids, &ASTNode{
		Type:  AtomType,
		Value: "Query",
		Text:  "Query",
	})
	for _, v := range vList {
		vr := &ASTNode{
			Type:  VariableType,
			Value: v,
			Text:  v,
		}
		trm := &ASTNode{
			Type:     TermType,
			Value:    v,
			Text:     v,
			Children: []*ASTNode{vr},
		}
		pKids = append(pKids, trm)
	}
	hd := &ASTNode{
		Type:     PredicateType,
		Value:    "Query",
		Text:     "Query",
		Children: pKids,
	}
	name := fmt.Sprintf("Query/%d", len(vList))
	return c.ConstructList(QueryType, name, hd, ps), nil
}

func (p *parser) callonQuery1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery1(stack["ps"])
}

func (c *current) onClauseList2(cl, cls interface{}) (interface{}, error) {
	return c.ConstructList(ClauseListType, nil, cl, cls), nil
}

func (p *parser) callonClauseList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseList2(stack["cl"], stack["cls"])
}

func (c *current) onClauseList9(cl interface{}) (interface{}, error) {
	return c.ConstructList(ClauseListType, nil, cl, nil), nil
}

func (p *parser) callonClauseList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClauseList9(stack["cl"])
}

func (c *current) onClause2(p, ps interface{}) (interface{}, error) {
	// Rule
	pn := p.(*ASTNode)
	name := fmt.Sprintf("%s/%d", pn.Children[0].Value.(string), len(pn.Children)-1)
	return c.ConstructList(ClauseType, name, p, ps), nil
}

func (p *parser) callonClause2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClause2(stack["p"], stack["ps"])
}

func (c *current) onClause13(p interface{}) (interface{}, error) {
	// Fact
	pn := p.(*ASTNode)
	name := fmt.Sprintf("%s/%d", pn.Children[0].Value.(string), len(pn.Children)-1)
	return c.ConstructList(ClauseType, name, p, nil), nil
}

func (p *parser) callonClause13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClause13(stack["p"])
}

func (c *current) onPredicateList2(p, ps interface{}) (interface{}, error) {
	return c.ConstructList(PredicateListType, nil, p, ps), nil
}

func (p *parser) callonPredicateList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPredicateList2(stack["p"], stack["ps"])
}

func (c *current) onPredicateList11(p interface{}) (interface{}, error) {
	return c.ConstructList(PredicateListType, nil, p, nil), nil
}

func (p *parser) callonPredicateList11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPredicateList11(stack["p"])
}

func (c *current) onPredicate2(r interface{}) (interface{}, error) {
	return c.ConstructList(PredicateType, nil, r, nil), nil
}

func (p *parser) callonPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPredicate2(stack["r"])
}

func (c *current) onPredicate5(a, ts interface{}) (interface{}, error) {
	return c.ConstructList(PredicateType, nil, a, ts), nil
}

func (p *parser) callonPredicate5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPredicate5(stack["a"], stack["ts"])
}

func (c *current) onPredicate16(a interface{}) (interface{}, error) {
	return c.ConstructList(PredicateType, nil, a, nil), nil
}

func (p *parser) callonPredicate16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPredicate16(stack["a"])
}

func (c *current) onRelation2(e1, o, e2 interface{}) (interface{}, error) {
	return c.PrepareRelation(e1, o, e2), nil
}

func (p *parser) callonRelation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelation2(stack["e1"], stack["o"], stack["e2"])
}

func (c *current) onRelation12(e1, o, e2 interface{}) (interface{}, error) {
	return c.PrepareRelation(e1, o, e2), nil
}

func (p *parser) callonRelation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelation12(stack["e1"], stack["o"], stack["e2"])
}

func (c *current) onRelationOperator1() (interface{}, error) {
	return c.ConstructList(RelationOpType, nil, nil, nil), nil
}

func (p *parser) callonRelationOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationOperator1()
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return c.ConstructList(RelationOpType, nil, nil, nil), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onAdditiveExpr2(e1, o, e2 interface{}) (interface{}, error) {
	kids := []*ASTNode{
		e1.(*ASTNode),
		o.(*ASTNode),
		e2.(*ASTNode),
	}
	node := ASTNode{
		Type:     AdditiveExprType,
		Text:     string(c.text),
		Value:    kids[1].Value,
		Pos:      c.pos,
		Children: kids,
	}
	return &node, nil
}

func (p *parser) callonAdditiveExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr2(stack["e1"], stack["o"], stack["e2"])
}

func (c *current) onAdditiveExpr12(e interface{}) (interface{}, error) {
	return c.ConstructList(AdditiveExprType, "", e, nil), nil
}

func (p *parser) callonAdditiveExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr12(stack["e"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return c.ConstructList(AdditiveOpType, nil, nil, nil), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr2(e1, o, e2 interface{}) (interface{}, error) {
	kids := []*ASTNode{
		e1.(*ASTNode),
		o.(*ASTNode),
		e2.(*ASTNode),
	}
	node := ASTNode{
		Type:     MultiplicativeExprType,
		Text:     string(c.text),
		Value:    kids[1].Value,
		Pos:      c.pos,
		Children: kids,
	}
	return &node, nil
}

func (p *parser) callonMultiplicativeExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr2(stack["e1"], stack["o"], stack["e2"])
}

func (c *current) onMultiplicativeExpr12(e interface{}) (interface{}, error) {
	return c.ConstructList(MultiplicativeExprType, "", e, nil), nil
}

func (p *parser) callonMultiplicativeExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr12(stack["e"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return c.ConstructList(MultiplicativeOpType, nil, nil, nil), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onUnaryExpr2(o, e interface{}) (interface{}, error) {
	kids := []*ASTNode{
		o.(*ASTNode),
		e.(*ASTNode),
	}
	node := ASTNode{
		Type:     UnaryExprType,
		Text:     string(c.text),
		Value:    kids[1].Value,
		Pos:      c.pos,
		Children: kids,
	}
	return &node, nil
}

func (p *parser) callonUnaryExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnaryExpr2(stack["o"], stack["e"])
}

func (c *current) onUnaryExpr9(e interface{}) (interface{}, error) {
	return c.ConstructList(UnaryExprType, "", e, nil), nil
}

func (p *parser) callonUnaryExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnaryExpr9(stack["e"])
}

func (c *current) onUnaryOperator1() (interface{}, error) {
	return c.ConstructList(UnaryOpType, nil, nil, nil), nil
}

func (p *parser) callonUnaryOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnaryOperator1()
}

func (c *current) onPrimaryExpr2(a interface{}) (interface{}, error) {
	return c.ConstructList(PrimaryExprType, "()", a, nil), nil
}

func (p *parser) callonPrimaryExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimaryExpr2(stack["a"])
}

func (c *current) onPrimaryExpr10(n interface{}) (interface{}, error) {
	return c.ConstructList(PrimaryExprType, "", n, nil), nil
}

func (p *parser) callonPrimaryExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimaryExpr10(stack["n"])
}

func (c *current) onPrimaryExpr13(v interface{}) (interface{}, error) {
	return c.ConstructList(PrimaryExprType, "", v, nil), nil
}

func (p *parser) callonPrimaryExpr13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimaryExpr13(stack["v"])
}

func (c *current) onTermList2(t, ts interface{}) (interface{}, error) {
	return c.ConstructList(TermListType, nil, t, ts), nil
}

func (p *parser) callonTermList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermList2(stack["t"], stack["ts"])
}

func (c *current) onTermList11(t interface{}) (interface{}, error) {
	return c.ConstructList(TermListType, nil, t, nil), nil
}

func (p *parser) callonTermList11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTermList11(stack["t"])
}

func (c *current) onTerm1(child interface{}) (interface{}, error) {
	return c.ConstructList(TermType, nil, child, nil), nil
}

func (p *parser) callonTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm1(stack["child"])
}

func (c *current) onList2(h, t interface{}) (interface{}, error) {
	// Unbounded extent
	return c.ConstructList(ListType, "[|]", h, t), nil
}

func (p *parser) callonList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList2(stack["h"], stack["t"])
}

func (c *current) onList15(h interface{}) (interface{}, error) {
	// Bounded extent
	return c.ConstructList(ListType, "[]", h, nil), nil
}

func (p *parser) callonList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList15(stack["h"])
}

func (c *current) onListTail1(v interface{}) (interface{}, error) {
	return c.ConstructList(ListTailType, nil, v, nil), nil
}

func (p *parser) callonListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListTail1(stack["v"])
}

func (c *current) onStructure1(a, ts interface{}) (interface{}, error) {
	return c.ConstructList(StructureType, nil, a, ts), nil
}

func (p *parser) callonStructure1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructure1(stack["a"], stack["ts"])
}

func (c *current) onVariable1() (interface{}, error) {
	return c.ConstructList(VariableType, nil, nil, nil), nil
}

func (p *parser) callonVariable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable1()
}

func (c *current) onAtom2() (interface{}, error) {
	return c.ConstructList(AtomType, nil, nil, nil), nil
}

func (p *parser) callonAtom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtom2()
}

func (c *current) onAtom4() (interface{}, error) {
	s := string(c.text)
	node := ASTNode{
		Type:  AtomType,
		Text:  s,
		Pos:   c.pos,
		Value: s[1 : len(s)-1],
	}
	return &node, nil
}

func (p *parser) callonAtom4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtom4()
}

func (c *current) onSmall_atom1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSmall_atom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSmall_atom1()
}

func (c *current) onNumeral1() (interface{}, error) {
	num, err := strconv.Atoi(string(c.text))
	if err != nil {
		return nil, err
	}
	node := ASTNode{
		Type:  NumeralType,
		Text:  string(c.text),
		Value: num,
		Pos:   c.pos,
	}
	return &node, nil
}

func (p *parser) callonNumeral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumeral1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
